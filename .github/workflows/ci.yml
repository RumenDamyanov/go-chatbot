name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  GO_VERSION: "1.23"

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run staticcheck
      uses: dominikh/staticcheck-action@v1.4.0
      with:
        version: "latest"
        install-go: false

    - name: Run tests
      run: go test -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      if: matrix.go-version == env.GO_VERSION
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build
      run: go build -v ./...

    - name: Verify project structure
      run: |
        echo "Checking project structure..."
        if [ ! -f "go.mod" ]; then
          echo "❌ go.mod not found"
          exit 1
        fi
        if [ ! -f "chatbot.go" ]; then
          echo "❌ chatbot.go not found"
          exit 1
        fi
        echo "✅ Project structure looks good"

    - name: Build examples
      run: |
        if [ -d "examples" ]; then
          for example in examples/*/; do
            if [ -f "$example/main.go" ]; then
              echo "Building example: $example"
              cd "$example"
              go build -v .
              if [ $? -ne 0 ]; then
                echo "❌ Failed to build $example"
                exit 1
              fi
              echo "✅ Successfully built $example"
              cd - > /dev/null
            fi
          done
        else
          echo "No examples directory found"
        fi

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec -no-fail -fmt sarif -out results.sarif ./...

    - name: Upload SARIF file
      if: always() && hashFiles('results.sarif') != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
